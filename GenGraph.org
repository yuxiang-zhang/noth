* Build Diagram
#+name: FA-diagram-from-tables
#+HEADER: :var nodes=nodes-fa graph=diagram horiz='t
#+BEGIN_SRC emacs-lisp :file fa.jpg :colnames yes :exports none
(org-babel-execute:dot
 (concat
  "digraph {\n"
  (when horiz "rankdir=LR;\n")       ;up-down or left-right
  (mapconcat
   (lambda (x)
     (format "%s [label=\"%s\" shape=%s style=\"filled\" fillcolor=\"none\"]"
             (car x)
             (nth 1 x)
             (if (string= "" (nth 2 x))
               "circle" 
               ;else
               (if (string= "none" (nth 2 x)) 
                 "none fixedsize=true width=0" 
               ;else
               (if (string= "f" (nth 2 x))
                 "doublecircle fixedsize=true width=.4"
                 (nth 2 x)))))) nodes "\n")
  "\n"
  (mapconcat
   (lambda (x)
     (format "%s -> %s [label=\"%s\" style=\"%s\" fontsize=11 fontname=\"palatino\"]"
             (car x)
             (nth 2 x)
             (nth 1 x)
             (nth 3 x))) graph "\n")
  "labelloc=\"t\";\nlabel=\"\""
  "}\n") params)
#+END_SRC   

#+name: nodes-fa
| node | label | state |
|------+-------+-------|
|      |       |       |
|    o |       | none  |
|    0 |       |       |
|    1 |       |       |
|    2 |       |       |
|    3 |       |       |
|    4 |       | f     |


#+name: diagram
| from | label                  | to | style |
|------+------------------------+----+-------|
|      |                        |    |       |
|    o |                        |  0 |       |
|    0 | a,z,Az                 |  1 |       |
|    1 | a,A,AA                 |  1 |       |
|    1 | b,A,BA                 |  2 |       |
|    2 | b,B,BB                 |  2 |       |
|    2 | (C,B,&#955;)           |  3 |       |
|    3 | C,B,&#955;\nC,A,&#955; |  3 |       |
|    3 | &#955;,z,&#955;        |  4 |       |

#+CALL: FA-diagram-from-tables[:file ../notes/cfl04.jpg](nodes=nodes-fa[2:-1],graph=diagram[2:-1]) :results file

#+RESULTS:



* Build Tree
#+name: tree-from-tables
#+HEADER: :var nodes=nodes-tree graph=tree horiz='nil
#+BEGIN_SRC emacs-lisp :file tree.jpg :colnames yes :exports none
(org-babel-execute:dot
 (concat
  "digraph {\nnodesep=.1;\n"
  (when horiz "rankdir=LR;\n")       ;up-down or left-right
  (mapconcat
   (lambda (x)
     (format "%s [label=\"%s\" shape=\"none\" fixedsize=true width=.1 height=.2 style=\"filled\" fillcolor=\"none\" fontsize=11 fontname=\"palatino\"]"
             (car x)
             (nth 1 x)
             )) nodes "\n")
  "\n"
  (mapconcat
   (lambda (x)
     (format "%s -> %s [dir=\"none\"]"
             (car x)
             (nth 1 x))) graph "\n")
  "labelloc=\"t\";\nlabel=\"\""
  "}\n") params)
#+END_SRC   

#+name: nodes-tree
| node | label |
|------+-------|
|      |       |
|    0 | S     |
|    1 | i     |
|    2 | C     |
|    3 | t     |
|   46 | S     |
|   40 | i     |
|   41 | C     |
|   42 | t     |
|   43 | S     |
|   44 | e     |
|   45 | S     |

#+name: tree
| from | to |
|------+----|
|      |    |
|    0 |  1 |
|    0 |  2 |
|    0 |  3 |
|    0 | 46 |
|   46 | 40 |
|   46 | 41 |
|   46 | 42 |
|   46 | 43 |
|   46 | 44 |
|   46 | 45 |

#+CALL: tree-from-tables[:file ../notes/dtree04.png](nodes=nodes-tree[2:-1],graph=tree[2:-1]) :results file

#+RESULTS:
[[file:../notes/dtree04.png]]

