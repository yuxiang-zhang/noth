
* Tables
#+name: nodes
| node     | state/style | label (nth 1 x) |
|----------+-------------+-----------------|
|          |             |                 |
| o        | point       |                 |
| locked   |             |                 |
| unlocked |             |                 |

#+name: diagram
| from     | label                                               | to       | style |
|----------+-----------------------------------------------------+----------+-------|
|          |                                                     |          |       |
| unlocked | pass, / lock                                        | locked   |       |
| o        |                                                     | locked   |       |
| locked   | request entry, [ticket is valid],\n / (unlock;beep) | unlocked |       |

#+CALL: table-to-diagram[:file diagram.png](nodes=nodes[2:-1],graph=diagram[2:-1]) :results file

#+RESULTS:
[[file:diagram.png]]

* Prolog-related
** states
#+name: table-to-prolog
#+HEADER: :var nodes=nodes graph=diagram
#+BEGIN_SRC emacs-lisp :file states.pl :colnames yes :exports none
(write-region
 (mapconcat
  (lambda (str)
    (format "state(%s)."
            (downcase (car str))))
  nodes "\n") nil "states.pl")
#+END_SRC

#+RESULTS: table-to-prolog
[[file:transitions.pl]]

** transitions
#+name: table-to-prolog
#+HEADER: :var nodes=nodes graph=diagram
#+BEGIN_SRC emacs-lisp :file transitions.pl :colnames yes :exports none
(write-region 
 (mapconcat
  (lambda (str)
    (format "transition(%s,%s,%s)."
            (car str)
            (nth 2 str)
                                        ;parse transition label
            (let ((ega (split-string (nth 1 str) ","))
                  (e "")
                  (g "")
                  (a ""))
              (while ega
                (if (string-match "/" (car ega))
                    (setq a (replace-regexp-in-string ".*/\s?" "" (car ega)))
                  (if (string-match "\\\[" (car ega))
                      (setq g (replace-regexp-in-string "\\(.*\\\[\\|\\\]\\)" "" (car ega)))
                    (setq e (car ega))))
                (setq ega (cdr ega)))


; (if (string= "" z)
; (setq z "null")
; (if (< 1 (list-length (split-string z " ")))
; (setq z (concat "'" z "'"))))

(if (string= "" e)
(setq e "null")
(if (< 1 (list-length (split-string e " ")))
(setq e (concat "'" e "'"))))
(if (string= "" g)
(setq g "null")
(if (< 1 (list-length (split-string g " ")))
(setq g (concat "'" g "'"))))
(if (string= "" a)
(setq a "null")
(if (< 1 (list-length (split-string a " ")))
(setq a (concat "'" a "'"))))

              (concat e "," g "," a))
                                        ;end parsing
            )) graph "\n") nil "transitions.pl")
#+END_SRC
* Build Diagram
#+name: table-to-diagram
  #+HEADER: :var nodes=nodes graph=diagram horiz='t
#+BEGIN_SRC emacs-lisp :file diagram.png :colnames yes :exports none
(org-babel-execute:dot
 (concat
  "digraph {\n"
  (when horiz "rankdir=LR;\n")       ;up-down or left-right
  (mapconcat
   (lambda (x)
     (format "%s [label=\"%s\" shape=%s style=filled]"
             (car x)
             (car x)
             (if (string= "" (nth 1 x))
               "rect fixedsize=true fillcolor=none" 
               ;else
               (if (string= "point" (nth 1 x)) 
                 "point fixedsize=true width=.1 fillcolor=black" 
               ;else
               (if (string= "f" (nth 1 x))
                 "doublecircle fixedsize=true width=.1 fillcolor=black"
                 (nth 2 x)))))) nodes "\n")
  "\n"
  (mapconcat
   (lambda (x)
     (format "%s -> %s [label=\"%s\" fixedsize=\"shape\" color=\"%s\" fontcolor=\"%s\" fontsize=9 fontname=\"palatino\"]"
             (car x)
             (nth 2 x)
             (nth 1 x)
             (nth 3 x)
             (nth 3 x))) graph "\n")
  "labelloc=\"t\";\nlabeljust=\"l\";\nlabelfontname=\"helvetica\";\nlabel=\"\""
  "}\n") params)
#+END_SRC   

#+RESULTS: table-to-diagram
[[file:diagram.png]]

* Build Tree
#+name: tree-from-tables
#+HEADER: :var nodes=nodes-tree graph=tree horiz='nil
#+BEGIN_SRC emacs-lisp :file tree.jpg :colnames yes :exports none
(org-babel-execute:dot
 (concat
  "digraph {\nnodesep=.1;\n"
  (when horiz "rankdir=LR;\n")       ;up-down or left-right
  (mapconcat
   (lambda (x)
     (format "%s [label=\"%s\" shape=\"none\" fixedsize=true width=.1 height=.2 style=\"filled\" fillcolor=\"none\" fontsize=11 fontname=\"palatino\"]"
             (car x)
             (nth 1 x)
             )) nodes "\n")
  "\n"
  (mapconcat
   (lambda (x)
     (format "%s -> %s [dir=\"none\"]"
             (car x)
             (nth 1 x))) graph "\n")
  "labelloc=\"t\";\nlabel=\"\""
  "}\n") params)
#+END_SRC   

#+name: nodes-tree
| node | label |
|------+-------|
|      |       |
| S0   | S     |
| A0   | A     |
| A1   | A     |
| B0   | B     |
| B1   | B     |
| B2   | B     |
| B3   | B     |
| a0   | a     |
| a1   | a     |
| a2   | a     |
| a3   | a     |

#+name: tree
| from | to |
|------+----|
|      |    |
| S0   | A0 |
| S0   | A1 |
| A0   | B0 |
| A0   | B1 |
| A1   | B2 |
| A1   | B3 |
| B0   | a0 |
| B1   | a1 |
| B2   | a2 |
| B3   | a3 |

#+CALL: tree-from-tables[:file wsq7tree.png](nodes=nodes-tree[2:-1],graph=tree[2:-1]) :results file

#+RESULTS:
[[file:wsq7tree.png]]

 